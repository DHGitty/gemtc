package org.drugis.mtc.parameterization;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.drugis.mtc.model.Study;
import org.drugis.mtc.model.Treatment;

import edu.uci.ics.jung.algorithms.transformation.FoldingTransformerFixed.FoldedEdge;
import edu.uci.ics.jung.graph.Hypergraph;
import edu.uci.ics.jung.graph.Tree;
import edu.uci.ics.jung.graph.UndirectedGraph;

public class InconsistencyParameterization implements Parameterization {
	/**
	 * Get the classes of fundamental cycles that share the same inconsistency factor (if any).
	 * The fundamental cycles are those cycles that are generated by the given spanning tree in the given study graph.
	 * @param studyGraph The comparison graph.
	 * @param tree Spanning tree of the comparisonjj graph.
	 * @return
	 */
	public static Map<Partition, Set<List<Treatment>>> getCycleClasses(UndirectedGraph<Treatment, FoldedEdge<Treatment, Study>> cGraph, Tree<Treatment, ?> tree) {
		// TODO Auto-generated method stub
		return null;
	}

	public static int getInconsistencyDegree(Hypergraph<Treatment, Study> studyGraph, Tree<Treatment, ?> tree) {
		// TODO Auto-generated method stub
		return 0;
	}
	
	@Override
	public List<NetworkParameter> getParameters() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Treatment getStudyBaseline(Study s) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<NetworkParameter, Integer> parameterize(Treatment base, Treatment subj) {
		// TODO Auto-generated method stub
		return null;
	}

}
